package com.ssafy.hw.step4;

public class Refrigerator extends Product {
	// 코드를 작성하세요.

	private String category;
	private int liter;
	private boolean freezer;
	private int year;

	public Refrigerator() {
		super();
	}

	public Refrigerator(String pCode, String pName, int price, int quantity, String brand, String desc, String category,
			int liter, boolean freezer, int year) {
		super(pCode, pName, price, quantity, brand, desc);
		this.category = category;
		this.liter = liter;
		this.freezer = freezer;
		this.year = year;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public int getLiter() {
		return liter;
	}

	public void setLiter(int liter) {
		this.liter = liter;
	}

	public boolean isFreezer() {
		return freezer;
	}

	public void setFreezer(boolean freezer) {
		this.freezer = freezer;
	}

	public int getYear() {
		return year;
	}

	public void setYear(int year) {
		this.year = year;
	}

	@Override
	public String toString() {
		return super.toString() + "Refrigerator [category=" + category + ", liter=" + liter + ", freezer=" + freezer + ", year=" + year
				+ "]";
	}
	


}


package com.ssafy.hw.step4;

public class ProductManagerImpl implements IProductManager{
	private int size1 = 0; //product
	private int size2 = 0; //review

	private final int MAX_PRODUCT_SIZE = 100;
	private final int MAX_REVIEW_SIZE = 1000;

	private Product[] productList = new Product[MAX_PRODUCT_SIZE];
	private Review[] reviewList = new Review[MAX_REVIEW_SIZE];
	
	public static ProductManagerImpl pm = new ProductManagerImpl();
	
	public static ProductManagerImpl getInstance() {
		return pm;
	}

	public boolean addProduct(Product product) {

		if (size1 < MAX_PRODUCT_SIZE) {
			productList[size1++] = product;
			return true;
		} else {
			System.out.println("제품의 수가 100을 넘었습니다. 등록불가.");
			return false;
		}
	}
	
	public boolean updateProduct(Product product) {
		for (int i = 0; i < size1; i++) {
			if (productList[i].getpCode() == product.getpCode()) {
				productList[i].setpName(product.getpName());
				productList[i].setPrice(product.getPrice());
				productList[i].setQuantity(product.getQuantity());
				productList[i].setBrand(product.getBrand());
				productList[i].setDesc(product.getDesc());
				return true;
			}
		}
		return false;

	}
	
	public boolean removeProduct(String pCode) {

		for (int i = 0; i < size1; i++) {
			if (productList[i].getpCode() == pCode) {
				int remove_idx = i;
				for (int j = remove_idx; j < size1 - 1; j++) {
					productList[j] = productList[j + 1];
				}
				productList[size1] = null;
				size1--;
				return true;
			}
		}
		return false;
	}

	public int sell(String pCode, int cnt) {
		for (int i = 0; i < size1; i++) {
			if (productList[i].getpCode() == pCode) {
				productList[i].setQuantity(productList[i].getQuantity() - cnt);
				return productList[i].getQuantity();
			}			
		}
		return -1;
	}

	public Product[] getProductList() {
		Product[] result = new Product[size1];

		for (int i = 0; i < size1; i++) {
			result[i] = productList[i];
		}
		return result;
	}
	
	public Product searchByCode(String pCode) {
		
		for (int i = 0; i <this.size1 ; i++) {
			if (productList[i].getpCode().equals(pCode)) {
				return productList[i];
			}
		}
		return null;
	}

	public boolean addReview(Review review) {

		if (size2 < MAX_REVIEW_SIZE) {
			reviewList[size2++] = review;
			return true;
		} else {
			System.out.println("리뷰의 수가 1000을 넘었습니다. 등록 불가.");
			return false;
		}
	}

	public boolean removeReview(int reviewid) {

		for (int i = 0; i < size2; i++) {
			if (reviewList[i].getReviewid() == reviewid) {
				int remove_idx = i;
				for (int j = remove_idx; j < size2 - 1; j++) {
					reviewList[j] = reviewList[j + 1];
				}
				reviewList[size2] = null;
				size2--;
				return true;
			}
		}
		return false;
	}

	public Review[] getProductReview(String pCode) {
		int cnt = 0;
		for (int i = 0; i < this.size2; i++) {
			if (reviewList[i].getpCode().equals(pCode))
				cnt++;
		}

		Review[] result = new Review[cnt];
		int idx = 0;
		for (int i = 0; i < this.size2; i++) {
			if (reviewList[i].getpCode().equals(pCode)) 
				result[idx++] = reviewList[i];

		}
		return result;
	}
	
	public Product[] searchByName(String pName) {
		int cnt = 0;
		for (int i = 0; i < this.size1; i++) {
			if (productList[i].getpName().contains(pName))
				cnt++;
		}

		Product[] result = new Product[cnt];
		int idx = 0;
		for (int i = 0; i < this.size1; i++) {
			if (productList[i].getpName().contains(pName)) 
				result[idx++] = productList[i];

		}
		return result;
	}
	
	public long getTotalPrice() {
		int total = 0;

		for (int i = 0; i < this.size1; i++) {
			total += (productList[i].getPrice()) * (productList[i].getQuantity());
		}

		return total;
	}
	
	public Product[] getProducts() {

		int cnt = 0;

		for (int i = 0; i < this.size1; i++) {
			if (!(productList[i] instanceof Refrigerator)) {
				cnt++;
			}
		}

		if (cnt == 0)
			return null;

		Product[] res = new Product[cnt];

		for (int i = 0, index = 0; i < this.size1; i++) {
			if (!(productList[i] instanceof Refrigerator)) {
				res[index++] = productList[i];
			}
		}

		return res;

	}
	
	Refrigerator[] refList;
	int refcnt = 0;

	public Refrigerator[] getRefrigerators() {

		for (int i = 0; i < this.size1; i++) {
			if (productList[i] instanceof Refrigerator) {
				refcnt++;
			}
		}

		if (refcnt == 0)
			return null;

		refList = new Refrigerator[refcnt];

		for (int i = 0, index = 0; i < this.size1; i++) {
			if (productList[i] instanceof Refrigerator) {
				refList[index++] = (Refrigerator) productList[i];
			}
		}
		return refList;
	}
	
	public Refrigerator[] getRefrigeratorsFreezer(boolean freezer){
		
		int cnt = 0;
		
		for (int i = 0;i <refcnt ; i++) if(refList[i].isFreezer() == freezer)
			cnt++;
		
		Refrigerator[] res = new Refrigerator[cnt];
		
		for (int i = 0, index = 0;i < refcnt; i++) if(refList[i].isFreezer() == freezer)
			res[index++] = refList[i];
		return res;
	}

}

package com.ssafy.hw.step4;

public interface IProductManager {
	boolean addProduct(Product product);
	boolean updateProduct(Product Product);
	boolean removeProduct(String pCode);
	int sell(String pCode, int cnt);
	Product[] getProductList();
	Product searchByCode(String pCode);
	boolean addReview(Review review);
	boolean removeReview(int reviewid);
	Review[] getProductReview(String pCode);
	Product[] searchByName(String pName);
	long getTotalPrice();
	Product[] getProducts();
	Refrigerator[] getRefrigerators();
	Refrigerator[] getRefrigeratorsFreezer(boolean freezer);

}
package com.ssafy.hw.step4;

public class ProductTest {

	
	public static void main(String[] args) {
		
		Refrigerator ref1 = new Refrigerator("R00001", "S냉장고", 1500000, 50,  "삼성", "삼성에서 출시한 스마트냉장고입니다.", "냉장고", 1500, true, 2023);
		Refrigerator ref2 = new Refrigerator("R00002", "A냉장고", 1100000, 10,  "알파", "알파에서 출시한 스마트냉장고입니다.", "냉장고", 1100, false, 2022);
		Refrigerator ref3 = new Refrigerator("R00003", "B냉장고", 1200000, 20,  "베타", "베타에서 출시한 스마트냉장고입니다.", "냉장고", 1200, true, 2022);
		Refrigerator ref4 = new Refrigerator("R00004", "C냉장고", 1300000, 30,  "감마", "감마에서 출시한 스마트냉장고입니다.", "냉장고", 1300, false, 2021);
		Refrigerator ref5 = new Refrigerator("R00005", "D냉장고", 1400000, 40,  "오메가", "오메가에서 출시한 스마트냉장고입니다.", "냉장고", 1400, true, 2021);
		Product prd2 = new Product("P00001","우주폰S", 500000, 100, "삼성", "삼성에서 출시한 우주폰S입니다.");
		Product prd3 = new Product("P00002","사과폰", 1500000, 100, "애플", "애플에서 출시한 사과폰입니다.");
		
		Review rev1 = new Review(1,"R00001", "park", "가전제품은 LG");
		Review rev2 = new Review(2,"P00001", "yang", "성능이 아주 좋습니당~!");
		Review rev3 = new Review(3,"P00002", "kim", "갬성 낭낭해요~");
		Review rev4 = new Review(4,"P00002", "lee", "나는야앱등이");
		
		ProductManagerImpl pm = ProductManagerImpl.getInstance();
		
		pm.addProduct(ref1);
		pm.addProduct(ref2);
		pm.addProduct(ref3);
		pm.addProduct(ref4);
		pm.addProduct(ref5);
		pm.addProduct(prd2);
		pm.addProduct(prd3);
		pm.addReview(rev1);
		pm.addReview(rev2);
		pm.addReview(rev3);
		pm.addReview(rev4);
				
		System.out.println("-------------제품 목록-------------");
		Product[] resList = pm.getProductList();
		for(Product m : resList)
			System.out.println(m);
		
		System.out.println("-------------일반 상품 목록-------------");
		Product[] normList = pm.getProducts();
		for(Product m : normList)
			System.out.println(m);
		
		System.out.println("-------------냉장고 목록-------------");
		Refrigerator[] refrigerList = pm.getRefrigerators();
		for(Refrigerator m : refrigerList)
			System.out.println(m);
		
		System.out.println("-------------냉동고 있는 목록-------------");
		Refrigerator[] freezerList = pm.getRefrigeratorsFreezer(true);
		for(Refrigerator m : freezerList)
			System.out.println(m);
		System.out.println("-------------이름 검색 : S-------------");
		Product[] searchList1 = pm.searchByName("S");
		for(Product m : searchList1)
			System.out.println(m);
		
		System.out.println("-------------제품 총 가격-------------");
		System.out.println(pm.getTotalPrice());

	}
}


